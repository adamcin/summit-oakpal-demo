<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:sling="http://sling.apache.org/jcr/sling/1.0" xmlns:cq="http://www.day.com/jcr/cq/1.0"
          xmlns:jcr="http://www.jcp.org/jcr/1.0" xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
          jcr:primaryType="cq:Page">
    <jcr:content
            cq:contextHubPath="/etc/cloudsettings/default/contexthub"
            cq:contextHubSegmentsPath="/etc/segmentation/contexthub"
            cq:template="/conf/oakpal-demo/settings/wcm/templates/content-page"
            jcr:primaryType="cq:PageContent"
            jcr:title=""
            sling:resourceType="oakpal-demo/components/structure/page"
            pageTitle="New Project"
            socialMedia="[facebook]">
        <root
                jcr:primaryType="nt:unstructured"
                sling:resourceType="wcm/foundation/components/responsivegrid">
            <responsivegrid
                    jcr:lastModifiedBy="admin"
                    jcr:primaryType="nt:unstructured"
                    sling:resourceType="wcm/foundation/components/responsivegrid">
                <bounteouslogo jcr:primaryType="nt:unstructured"
                       sling:resourceType="oakpal-demo/components/content/bounteouslogo"/>
                <title jcr:primaryType="nt:unstructured"
                       jcr:title="About OakPAL"
                       sling:resourceType="oakpal-demo/components/content/title"/>
                <text jcr:primaryType="nt:unstructured"
                      sling:resourceType="oakpal-demo/components/content/text"
                      text="&lt;p>&#xa;                OakPAL was inspired by my continuing attempts to improve the validation features of the &lt;a class=&quot;externalLink&quot; href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/CRX+Content+Package+Deployer+Plugin&quot;>CRX Content&#xa;                Package Deployer Plugin for Jenkins&lt;/a>. It relies on another library I created called&#xa;                granite-client-packman. The &lt;a class=&quot;externalLink&quot; href=&quot;http://adamcin.net/granite-client-packman/apidocs/net/adamcin/granite/client/packman/validation/PackageValidator.html&quot;>&#xa;                validation features&#xa;            &lt;/a> I added to that library began to hit significant&#xa;                limitations because I was approaching the task from a static analysis perspective. It's easy to&#xa;                statically examine a package for the content that it will create in a repository, because this content&#xa;                exists in the artifact itself, and is predictably shaped by the package's workspace filter. It is also&#xa;                relatively easy to check package metadata for completeness and conformance to CI assumptions and to&#xa;                parse DocView XML files to ensure well-formedness.&#xa;            &lt;/p>&#xa;&#xa;            &#xa;&lt;p>&#xa;                However, static package analysis leaves some major gaps and edge cases unaddressed:&#xa;            &lt;/p>&#xa;&#xa;            &#xa;&lt;ol style=&quot;list-style-type: decimal&quot;>&#xa;                &#xa;&lt;li>&#xa;                    Inability to make deterministic assertions about what existing content will be deleted or changed&#xa;                    upon&#xa;                    package installation.&#xa;                &lt;/li>&#xa;                &#xa;&lt;li>&#xa;                    Inability to account for NodeType constraints.&#xa;                &lt;/li>&#xa;                &#xa;&lt;li>&#xa;                    Inability to perform analysis of multiple packages that will be installed in sequence.&#xa;                &lt;/li>&#xa;            &lt;/ol>&#xa;&#xa;            &#xa;&lt;p>&#xa;                After ultimately failing to completely address the above issues with heuristics and broad and/or&#xa;                high-level restrictions on ACHandling and FilterSet import modes, I finally realized that the only way&#xa;                to properly test a package is by installing it, and watching (listening?) for what happens to the target&#xa;                repository.&#xa;            &lt;/p>&#xa;&#xa;            &#xa;&lt;p>&#xa;                The CRX Jenkins plugin (and the content-package-maven-plugin) make it possible to install packages in&#xa;                AEM servers over HTTP, but the simple protocol returns only limited information about errors, you have&#xa;                to account for transport errors and authentication, and the heavyweight nature of the application makes&#xa;                it painful to implement a CI process that can reset an AEM server to an exact precondition state.&#xa;            &lt;/p>&#xa;&#xa;            &#xa;&lt;p>&#xa;                OakPAL was designed to fill this gap, by providing:&#xa;            &lt;/p>&#xa;            &#xa;&lt;ol style=&quot;list-style-type: decimal&quot;>&#xa;                &#xa;&lt;li>&#xa;                    A model for repeatable repository state initialization using InitStages and preinstall packages.&#xa;                &lt;/li>&#xa;                &#xa;&lt;li>&#xa;                    An OakMachine class with a fluent Builder API that encapsulates the creation of a fresh Oak&#xa;                    repository, state initialization, and package installation for every set of package files.&#xa;                &lt;/li>&#xa;                &#xa;&lt;li>&#xa;                    A pluggable listener API with classpath discovery of third-party &lt;a class=&quot;externalLink&quot; href=&quot;https://github.com/adamcin/oakpal/blob/master/core/src/main/resources/OAKPAL-INF/checklists/basic.json&quot;>&#xa;                    Checklists&lt;/a>, &lt;a href=&quot;http://adamcin.net/oakpal/oakpal-core/apidocs/net/adamcin/oakpal/core/ProgressCheck.html&quot;>&#xa;                    ProgressChecks&lt;/a>, and&#xa;                    &lt;a href=&quot;http://adamcin.net/oakpal/oakpal-maven-plugin/writing-a-script-check.html&quot;>ScriptProgressChecks&lt;/a>, which receive&#xa;                    progress tracker events along with read-only access to&#xa;                    incremental&#xa;                    repository state, and which can report Violations at the end of a scan.&#xa;                &lt;/li>&#xa;            &lt;/ol>&#xa;&#xa;            &#xa;&lt;p>&#xa;                The first integration target for this library is Maven, via the &lt;a href=&quot;http://adamcin.net/oakpal/oakpal-maven-plugin/index.html&quot;>oakpal-maven-plugin&lt;/a>. Depending on&#xa;                interest, future integrations would likely include the Jenkins CRX plugin and a command-line interface&#xa;                deployable with Docker.&#xa;            &lt;/p>&#xa; "
                      textIsRich="true"/>
                <contentfragment jcr:primaryType="nt:unstructured"
                                 sling:resourceType="dam/cfm/components/contentfragment"
                                 text=""/>
            </responsivegrid>
        </root>
    </jcr:content>
</jcr:root>
